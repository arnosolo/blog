import{_ as t,a as n,b as l,c as p,d as h,e as r,f as o,g as k,h as d,i as c,j as g}from"./chunks/96d33808314288722e8ac494228bbecb799e30e13a4a4eb2631447d915bb8acd.B4KkMgoy.js";import{_ as E,c as u,o as y,j as i,ae as F,a as m,t as e}from"./chunks/framework.CLNW5JS9.js";const b="/blog/assets/565df8a386c7e7ee8fa84ec936e2535dd653e02c4cc3b5774233752d6772bf9b.CDwp_raf.jpeg",T=JSON.parse('{"title":"Build an iOS App then publish to TestFlight","description":"This article shows how to build and publish an iOS App to TestFlight manually or automatically with Xcode Cloud.","frontmatter":{"title":"Build an iOS App then publish to TestFlight","lang":"en-US","description":"This article shows how to build and publish an iOS App to TestFlight manually or automatically with Xcode Cloud."},"headers":[],"relativePath":"5-build-ios-app-with-xcode-cloud.md","filePath":"5-build-ios-app-with-xcode-cloud.md"}'),f={name:"5-build-ios-app-with-xcode-cloud.md"},A={id:"frontmatter-title",tabindex:"-1"};function C(a,s,B,D,v,w){return y(),u("div",null,[i("h1",A,[m(e(a.$frontmatter.title)+" ",1),s[0]||(s[0]=i("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),i("p",null,e(a.$frontmatter.description),1),s[1]||(s[1]=F('<h2 id="goals" tabindex="-1">Goals <a class="header-anchor" href="#goals" aria-label="Permalink to &quot;Goals&quot;">​</a></h2><ol><li><p>After pushing a <code>commit</code> to the <code>main</code> branch of the <code>GitHub repository</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span></code></pre></div></li><li><p>Xcode Cloud should automatically start building the app and publish the build to <code>TestFlight</code>.</p></li></ol><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ol><li>Your <code>Apple ID</code> has joined the <a href="https://developer.apple.com/programs/" target="_blank" rel="noreferrer">Apple Developer Program</a></li><li>A <code>GitHub</code> account</li></ol><h2 id="create-an-xcode-project" tabindex="-1">Create an Xcode Project <a class="header-anchor" href="#create-an-xcode-project" aria-label="Permalink to &quot;Create an Xcode Project&quot;">​</a></h2><h3 id="create-a-new-bundle-id" tabindex="-1">Create a New <code>Bundle ID</code> <a class="header-anchor" href="#create-a-new-bundle-id" aria-label="Permalink to &quot;Create a New `Bundle ID`&quot;">​</a></h3><p>Every Apple app has a unique ID, known as a <code>Bundle ID</code>. You can apply for this ID on the Apple Developer website: <a href="https://developer.apple.com/account/resources/identifiers/list" target="_blank" rel="noreferrer">Apple Developer &gt; Account &gt; Certificates, IDs &amp; Profiles &gt; Identifiers</a>. <img src="'+t+'" alt="picture 0"></p><h3 id="create-an-app-store-connect-app" tabindex="-1">Create an <code>App Store Connect App</code> <a class="header-anchor" href="#create-an-app-store-connect-app" aria-label="Permalink to &quot;Create an `App Store Connect App`&quot;">​</a></h3><p>To publish your app to the <code>App Store</code>, you must use <a href="https://appstoreconnect.apple.com/" target="_blank" rel="noreferrer">App Store Connect</a>. Tasks such as app updates, adding <code>TestFlight</code> testers, and viewing <code>Xcode Cloud</code> logs are all done through this site.</p><ol><li>In the Apps page, click <strong>New App</strong>.</li><li>Fill out the New App form. You may wonder what to put for SKU — you can enter anything; typically, I just use the <code>Bundle ID</code>. <img src="'+n+'" alt="picture 1"></li></ol><h3 id="create-the-xcode-project" tabindex="-1">Create the <code>Xcode</code> Project <a class="header-anchor" href="#create-the-xcode-project" aria-label="Permalink to &quot;Create the `Xcode` Project&quot;">​</a></h3><ol><li>Open <code>Xcode</code>, and create a new project.</li><li>Update the project&#39;s <code>Bundle ID</code> to the one you just created. Go to <strong>Project Navigator</strong> &gt; <code>app.xcodeproj</code> &gt; <code>Signing &amp; Capabilities</code> &gt; <code>Signing</code> &gt; <code>Bundle Identifier</code>. <img src="'+l+'" alt="picture 2"></li><li>After changing the <code>Bundle ID</code>, <code>Xcode</code> will automatically fetch a provisioning profile. Click the <code>i</code> icon next to <code>Provisioning Profile</code>. If everything is checked, it was successful. <img src="'+p+`" alt="picture 3"></li><li>Run the project on an iOS simulator to confirm it runs correctly.</li></ol><h2 id="manual-build-upload" tabindex="-1">Manual Build &amp; Upload <a class="header-anchor" href="#manual-build-upload" aria-label="Permalink to &quot;Manual Build &amp; Upload&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Before setting up <code>Xcode Cloud</code> auto-build, <strong>you must complete a manual upload</strong>. This ensures any problems you face during the cloud setup are truly due to <code>Xcode Cloud</code>, not the source code or <code>TestFlight</code>.</p></div><h3 id="set-the-app-icon" tabindex="-1">Set the App Icon <a class="header-anchor" href="#set-the-app-icon" aria-label="Permalink to &quot;Set the App Icon&quot;">​</a></h3><ul><li>This is <strong>required</strong>. Without an app icon, manual upload to <code>TestFlight</code> will fail.</li><li>The image <strong>must not have an alpha channel</strong>. If your icon has transparency, <code>Xcode Cloud</code> will fail to build. You can convert the icon to <code>JPEG</code> format, which does not support alpha channels.</li></ul><h3 id="set-encryption-settings" tabindex="-1">Set Encryption Settings <a class="header-anchor" href="#set-encryption-settings" aria-label="Permalink to &quot;Set Encryption Settings&quot;">​</a></h3><p>Set the <code>ITSAppUsesNonExemptEncryption</code> key in your <code>Info.plist</code>.</p><ul><li>This key specifies your app’s encryption usage. If you&#39;re unsure, set it to <code>false</code>.</li><li>This is <strong>required</strong>. Without it, you&#39;ll have to manually specify encryption settings in App Store Connect each time.</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;ITSAppUsesNonExemptEncryption&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="build-upload" tabindex="-1">Build &amp; Upload <a class="header-anchor" href="#build-upload" aria-label="Permalink to &quot;Build &amp; Upload&quot;">​</a></h3><ol><li>Set <code>Run Destination</code> to <code>Any iOS Device</code></li><li>Click <strong>Product &gt; Archive</strong> from the top menu</li><li>After building, an <code>Archives</code> window will appear (you can also open it via <strong>Window &gt; Organizer</strong>). Select the new archive, then click <strong>Distribute App</strong> to begin uploading to <code>TestFlight</code>. <img src="`+h+'" alt="picture 0"></li></ol><h3 id="create-a-testflight-testing-group" tabindex="-1">Create a TestFlight Testing Group <a class="header-anchor" href="#create-a-testflight-testing-group" aria-label="Permalink to &quot;Create a TestFlight Testing Group&quot;">​</a></h3><ol><li><p>Once the <code>Archive</code> is uploaded, you’ll find it in <a href="https://appstoreconnect.apple.com/" target="_blank" rel="noreferrer">App Store Connect &gt; TestFlight</a>.</p></li><li><p>Create an <code>Internal Testing</code> group.</p></li><li><p>Add testers using their <code>Apple ID</code>. An invite will be sent to their associated email.</p><ul><li>Note: If a tester isn’t part of your developer team, their <code>Apple ID</code> must be added as a team member first.</li></ul></li></ol><h3 id="accept-the-testflight-invitation" tabindex="-1">Accept the TestFlight Invitation <a class="header-anchor" href="#accept-the-testflight-invitation" aria-label="Permalink to &quot;Accept the TestFlight Invitation&quot;">​</a></h3><ol><li>Testers need to install the <a href="https://apps.apple.com/us/app/testflight/id899247664" target="_blank" rel="noreferrer">TestFlight app</a> on their device. <img src="'+b+'" alt="picture 0"></li><li>They should check their email and find the invitation from TestFlight.</li><li>Click <strong>View in TestFlight</strong> in the email, open the TestFlight app, and tap <strong>Accept</strong>. They’ll now see your app in TestFlight and will get updates when new versions are available. <img src="'+r+'" alt="picture 5"></li></ol><h3 id="upload-again" tabindex="-1">Upload Again <a class="header-anchor" href="#upload-again" aria-label="Permalink to &quot;Upload Again&quot;">​</a></h3><h4 id="bump-the-version-number" tabindex="-1">Bump the Version Number <a class="header-anchor" href="#bump-the-version-number" aria-label="Permalink to &quot;Bump the Version Number&quot;">​</a></h4><p>To upload a <strong>new version</strong> to TestFlight, you must increase the version number in <strong>Project Navigator &gt; app.xcodeproj &gt; General &gt; Identity</strong>, because TestFlight only accepts newer versions. <img src="'+o+`" alt="picture 2"></p><h2 id="xcode-cloud-auto-build-upload" tabindex="-1">Xcode Cloud Auto Build &amp; Upload <a class="header-anchor" href="#xcode-cloud-auto-build-upload" aria-label="Permalink to &quot;Xcode Cloud Auto Build &amp; Upload&quot;">​</a></h2><p>Once the <code>Xcode Cloud workflow</code> is set up, any push to the <code>main</code> branch on GitHub will trigger an automatic archive build and upload to <code>TestFlight</code>.</p><h3 id="auto-bump-version-number" tabindex="-1">Auto Bump Version Number <a class="header-anchor" href="#auto-bump-version-number" aria-label="Permalink to &quot;Auto Bump Version Number&quot;">​</a></h3><p>According to <a href="https://developer.apple.com/documentation/xcode/writing-custom-build-scripts" target="_blank" rel="noreferrer">Apple&#39;s documentation</a>, <code>Xcode Cloud</code> runs <code>ci_scripts/ci_post_clone.sh</code> before building. You can write a <code>JavaScript</code> script in this file to bump the version number.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-0ZXCl" id="tab-P8ixRtG" checked><label data-title="ci_post_clone.sh" for="tab-P8ixRtG">ci_post_clone.sh</label><input type="radio" name="group-0ZXCl" id="tab-P6lPekW"><label data-title="changeAppInfo.mjs" for="tab-P6lPekW">changeAppInfo.mjs</label></div><div class="blocks"><div class="language-sh vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HOMEBREW_NO_INSTALL_CLEANUP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TRUE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install node start</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install node end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># TODO: Replace &quot;app&quot; with the product name of Xcode project</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeAppInfo.mjs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env node</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node:fs/promises&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node:path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node:process&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Alert! Must pass Xcode project name as first param of the script.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * \`\`\`sh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * # app is Xcode project name</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * node changeAppInfo.mjs app</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * \`\`\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.argv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Skip the first two elements</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> projectName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[changeAppInfo] Must pass Xcode project name as first param of the script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> configPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`../\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.xcodeproj/project.pbxproj\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> increaseVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configPath)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Increase version automatically in project.pbxproj file</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Build #26 1.2 -&gt; 1.2.26</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Build #27 1.2 -&gt; 1.2.27</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> increaseVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">configPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> configText</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configPath, { encoding: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Changing \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configPath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> regex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">MARKETING_VERSION = (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">);</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> versionMatch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configText.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (versionMatch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Cant get iOS bundle version in \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configPath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, terminate build\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bundleVersion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> versionMatch[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MARKETING_VERSION = &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ciBuildNumber</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CI_BUILD_NUMBER</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ciBuildNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[changeAppInfo] CI_BUILD_NUMBER is required, but it&#39;s undefined&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> finalBundleVersion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bundleVersion</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ciBuildNumber</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Overwrite version: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bundleVersion</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} -&gt; \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">finalBundleVersion</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> updatedConfigText</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configText</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`MARKETING_VERSION = \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">finalBundleVersion</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">};\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configPath, updatedConfigText, { encoding: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`[changeAppInfo] \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></div></div><h3 id="no-transparent-pixels-in-app-icon" tabindex="-1">No Transparent Pixels in App Icon <a class="header-anchor" href="#no-transparent-pixels-in-app-icon" aria-label="Permalink to &quot;No Transparent Pixels in App Icon&quot;">​</a></h3><p>App icons must <strong>not</strong> contain transparent pixels. You can convert the icon to <code>JPEG</code>, which does not support alpha channels.</p><h3 id="create-a-github-repository" tabindex="-1">Create a GitHub Repository <a class="header-anchor" href="#create-a-github-repository" aria-label="Permalink to &quot;Create a GitHub Repository&quot;">​</a></h3><ol><li>Create a <code>main</code> branch and push it to GitHub.</li><li>(Optional) Create a <code>build_ios</code> branch used exclusively for triggering builds.</li></ol><h3 id="create-an-xcode-cloud-workflow" tabindex="-1">Create an Xcode Cloud Workflow <a class="header-anchor" href="#create-an-xcode-cloud-workflow" aria-label="Permalink to &quot;Create an Xcode Cloud Workflow&quot;">​</a></h3><ol><li>In <code>Xcode</code> go to <strong>Project Navigator &gt; the rightmost tab &gt; Cloud &gt; Get Started</strong><img src="`+k+'" alt="picture 1"></li><li>Add an <code>Archive</code> action to the workflow. Set <code>Distribution Preparation</code> to <code>App Store Connect</code> since the build will eventually go to the App Store. <img src="'+d+'" alt="picture 10"></li><li>During the initial setup, authorize Xcode Cloud to access your GitHub repository. <img src="'+c+'" alt="picture 0"></li><li>Now, committing to the <code>main</code> branch will trigger the workflow. You can view the progress on <a href="https://appstoreconnect.apple.com/" target="_blank" rel="noreferrer">App Store Connect &gt; Xcode Cloud</a>.</li></ol><h3 id="auto-publish-to-testflight-after-build" tabindex="-1">Auto Publish to TestFlight After Build <a class="header-anchor" href="#auto-publish-to-testflight-after-build" aria-label="Permalink to &quot;Auto Publish to TestFlight After Build&quot;">​</a></h3><p>Although the workflow builds the archive, it doesn’t auto-publish by default. Go to <a href="https://appstoreconnect.apple.com/" target="_blank" rel="noreferrer">App Store Connect &gt; Xcode Cloud</a>, open the workflow, and add a <strong>Post-Action</strong> of type <strong>TestFlight Internal Testing</strong>. Select the testing group you created earlier. Now, every successful build will automatically be published to TestFlight. <img src="'+g+'" alt="picture 9"></p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://developer.apple.com/documentation/xcode/configuring-your-first-xcode-cloud-workflow" target="_blank" rel="noreferrer">Configuring your first Xcode Cloud workflow | Apple</a></li></ul>',44))])}const q=E(f,[["render",C]]);export{T as __pageData,q as default};
